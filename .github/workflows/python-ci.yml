name: Python CI

on:
  push:
    paths:
      - "app_python/**"
      - ".github/workflows/python-ci.yml"
  pull_request:
    paths:
    - "app_python/**"
    - ".github/workflows/python-ci.yml"

jobs:
  python-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app_python
    
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            ./app_python/requirements.txt

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Linting with flake 8
        run: |
          flake8 --exclude=./venv/
      
      - name: Linting with black
        run: |
          black .
        
      - name: Testing flask app
        run: |
          pytest
        working-directory: ./app_python

  security:
    runs-on: ubuntu-latest
    #needs: python-build
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      
      - uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
                --package-manager=pip
                --skip-unresolved
                --file=app_python/requirements.txt
      
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  docker:
    runs-on: ubuntu-latest
    needs: [python-build, security]
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Build & Push to Docker
        uses: docker/build-push-action@v2
        with:
          context: ./app_python
          file: ./app_python/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/moscowtime:latest